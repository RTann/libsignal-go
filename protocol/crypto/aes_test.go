package crypto

import (
	"crypto/aes"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPKCS7Pad(t *testing.T) {
	testcases := []struct {
		plaintext string
		padding   []byte
	}{
		{
			plaintext: "",
			padding: []byte{
				0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
				0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
			},
		},
		{
			plaintext: "H",
			padding: []byte{
				0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
				0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
			},
		},
		{
			plaintext: "He",
			padding: []byte{
				0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
				0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
			},
		},
		{
			plaintext: "Hel",
			padding: []byte{
				0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
				0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
			},
		},
		{
			plaintext: "Hell",
			padding: []byte{
				0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
				0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
			},
		},
		{
			plaintext: "Hello",
			padding: []byte{
				0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
				0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
			},
		},
		{
			plaintext: "Hello,",
			padding: []byte{
				0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
				0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
			},
		},
		{
			plaintext: "Hello, ",
			padding: []byte{
				0x09, 0x09, 0x09, 0x09, 0x09,
				0x09, 0x09, 0x09, 0x09,
			},
		},
		{
			plaintext: "Hello, W",
			padding: []byte{
				0x08, 0x08, 0x08, 0x08,
				0x08, 0x08, 0x08, 0x08,
			},
		},
		{
			plaintext: "Hello, Wo",
			padding: []byte{
				0x07, 0x07, 0x07, 0x07,
				0x07, 0x07, 0x07,
			},
		},
		{
			plaintext: "Hello, Wor",
			padding: []byte{
				0x06, 0x06, 0x06,
				0x06, 0x06, 0x06,
			},
		},
		{
			plaintext: "Hello, Worl",
			padding: []byte{
				0x05, 0x05, 0x05,
				0x05, 0x05,
			},
		},
		{
			plaintext: "Hello, World",
			padding: []byte{
				0x04, 0x04,
				0x04, 0x04,
			},
		},
		{
			plaintext: "Hello, World!",
			padding: []byte{
				0x03, 0x03,
				0x03,
			},
		},
		{
			plaintext: "Hello, World! ",
			padding: []byte{
				0x02,
				0x02,
			},
		},
		{
			plaintext: "Hello, World! :",
			padding: []byte{
				0x01,
			},
		},
		{
			plaintext: "Hello, World! :)",
			padding: []byte{
				0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
				0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
			},
		},
	}

	for _, testcase := range testcases {
		t.Run(testcase.plaintext, func(t *testing.T) {
			padded := append([]byte(testcase.plaintext), testcase.padding...)
			assert.Equal(t, padded, pkcs7pad([]byte(testcase.plaintext), aes.BlockSize))
			assert.Equal(t, testcase.plaintext, string(pkcs7unpad(padded)))
		})
	}
}
